package com.example.administrator.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS".
*/
public class NewsDao extends AbstractDao<News, Long> {

    public static final String TABLENAME = "NEWS";

    /**
     * Properties of entity News.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NewsID = new Property(1, String.class, "NewsID", false, "NEWS_ID");
        public final static Property CategoryId = new Property(2, Long.class, "CategoryId", false, "CATEGORY_ID");
        public final static Property Title = new Property(3, String.class, "Title", false, "TITLE");
        public final static Property ReleseDate = new Property(4, String.class, "ReleseDate", false, "RELESE_DATE");
        public final static Property TopicID = new Property(5, String.class, "TopicID", false, "TOPIC_ID");
        public final static Property IsClick = new Property(6, boolean.class, "isClick", false, "IS_CLICK");
    };


    public NewsDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NEWS_ID\" TEXT NOT NULL UNIQUE ," + // 1: NewsID
                "\"CATEGORY_ID\" INTEGER," + // 2: CategoryId
                "\"TITLE\" TEXT," + // 3: Title
                "\"RELESE_DATE\" TEXT," + // 4: ReleseDate
                "\"TOPIC_ID\" TEXT," + // 5: TopicID
                "\"IS_CLICK\" INTEGER NOT NULL );"); // 6: isClick
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, News entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNewsID());
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(3, categoryId);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(4, Title);
        }
 
        String ReleseDate = entity.getReleseDate();
        if (ReleseDate != null) {
            stmt.bindString(5, ReleseDate);
        }
 
        String TopicID = entity.getTopicID();
        if (TopicID != null) {
            stmt.bindString(6, TopicID);
        }
        stmt.bindLong(7, entity.getIsClick() ? 1L: 0L);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public News readEntity(Cursor cursor, int offset) {
        News entity = new News( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // NewsID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // CategoryId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ReleseDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TopicID
            cursor.getShort(offset + 6) != 0 // isClick
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, News entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNewsID(cursor.getString(offset + 1));
        entity.setCategoryId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReleseDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTopicID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsClick(cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(News entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(News entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
