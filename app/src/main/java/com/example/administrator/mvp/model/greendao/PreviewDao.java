package com.example.administrator.mvp.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.administrator.mvp.model.greendao.Preview;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PREVIEW".
*/
public class PreviewDao extends AbstractDao<Preview, Long> {

    public static final String TABLENAME = "PREVIEW";

    /**
     * Properties of entity Preview.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NewsID = new Property(1, String.class, "NewsID", false, "NEWS_ID");
        public final static Property Type = new Property(2, Integer.class, "Type", false, "TYPE");
        public final static Property Body = new Property(3, String.class, "Body", false, "BODY");
        public final static Property Body1 = new Property(4, String.class, "Body1", false, "BODY1");
        public final static Property Body2 = new Property(5, String.class, "Body2", false, "BODY2");
    };


    public PreviewDao(DaoConfig config) {
        super(config);
    }
    
    public PreviewDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PREVIEW\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NEWS_ID\" TEXT," + // 1: NewsID
                "\"TYPE\" INTEGER," + // 2: Type
                "\"BODY\" TEXT," + // 3: Body
                "\"BODY1\" TEXT," + // 4: Body1
                "\"BODY2\" TEXT);"); // 5: Body2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PREVIEW\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Preview entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String NewsID = entity.getNewsID();
        if (NewsID != null) {
            stmt.bindString(2, NewsID);
        }
 
        Integer Type = entity.getType();
        if (Type != null) {
            stmt.bindLong(3, Type);
        }
 
        String Body = entity.getBody();
        if (Body != null) {
            stmt.bindString(4, Body);
        }
 
        String Body1 = entity.getBody1();
        if (Body1 != null) {
            stmt.bindString(5, Body1);
        }
 
        String Body2 = entity.getBody2();
        if (Body2 != null) {
            stmt.bindString(6, Body2);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Preview readEntity(Cursor cursor, int offset) {
        Preview entity = new Preview( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NewsID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Body
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Body1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Body2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Preview entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNewsID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBody(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBody1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBody2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Preview entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Preview entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
